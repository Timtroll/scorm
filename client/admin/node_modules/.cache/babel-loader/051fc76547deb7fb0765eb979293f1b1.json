{"remainingRequest":"/Volumes/MacOS/Files/GitLab/SCORM/scorm-admin/node_modules/babel-loader/lib/index.js!/Volumes/MacOS/Files/GitLab/SCORM/scorm-admin/src/router.js","dependencies":[{"path":"/Volumes/MacOS/Files/GitLab/SCORM/scorm-admin/src/router.js","mtime":1563379929935},{"path":"/Volumes/MacOS/Files/GitLab/SCORM/scorm-admin/node_modules/cache-loader/dist/cjs.js","mtime":1563033657658},{"path":"/Volumes/MacOS/Files/GitLab/SCORM/scorm-admin/node_modules/babel-loader/lib/index.js","mtime":1563033651329}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Router from 'vue-router';\nimport store from \"./store\";\nVue.use(Router);\nvar router = new Router({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes: [{\n    path: '/login',\n    name: 'Login',\n    component: function component() {\n      return import(\"./views/Login\");\n    },\n    meta: {\n      authRequired: false\n    }\n  }, {\n    path: '/',\n    name: 'Main',\n    component: function component() {\n      return import(\"./views/Main\");\n    },\n    redirect: {\n      name: 'Dashboard'\n    },\n    sideMenuParent: true,\n    meta: {\n      authRequired: true\n    },\n    children: [{\n      path: '/dashboard',\n      name: 'Dashboard',\n      component: function component() {\n        return import(\"./components/dashboard/DashBoard\");\n      },\n      props: {},\n      showInSideBar: true,\n      meta: {\n        authRequired: true,\n        icon: 'img/icons/sidebar_dashboard.svg',\n        breadcrumb: 'Рабочий стол'\n      }\n    }, {\n      path: '/pages',\n      name: 'Pages',\n      component: function component() {\n        return import(\"./components/dashboard/DashBoard\");\n      },\n      props: {},\n      showInSideBar: true,\n      meta: {\n        authRequired: true,\n        icon: 'img/icons/sidebar_pages.svg',\n        breadcrumb: 'Контент'\n      }\n    }, {\n      path: '/courses',\n      name: 'Courses',\n      component: function component() {\n        return import(\"./components/dashboard/DashBoard\");\n      },\n      props: {},\n      showInSideBar: true,\n      meta: {\n        authRequired: true,\n        icon: 'img/icons/sidebar_courses.svg',\n        breadcrumb: 'Курсы'\n      }\n    }, {\n      path: '/review',\n      name: 'Review',\n      component: function component() {\n        return import(\"./components/dashboard/DashBoard\");\n      },\n      props: {},\n      showInSideBar: true,\n      meta: {\n        authRequired: true,\n        icon: 'img/icons/sidebar_review.svg',\n        breadcrumb: 'Отзывы'\n      }\n    }, {\n      path: '/users',\n      name: 'Users',\n      component: function component() {\n        return import(\"./components/dashboard/DashBoard\");\n      },\n      props: {},\n      showInSideBar: true,\n      meta: {\n        authRequired: true,\n        icon: 'img/icons/sidebar_users.svg',\n        breadcrumb: 'Пользователи'\n      }\n    }, {\n      path: '/media',\n      name: 'Media',\n      component: function component() {\n        return import(\"./components/dashboard/DashBoard\");\n      },\n      props: {},\n      showInSideBar: true,\n      meta: {\n        authRequired: true,\n        icon: 'img/icons/sidebar_media.svg',\n        breadcrumb: 'Медиа хранилище'\n      }\n    }, {\n      path: '/profile',\n      name: 'Profile',\n      component: function component() {\n        return import(\"./components/ui/settings/Account\");\n      },\n      props: {},\n      showInSideBar: false,\n      meta: {\n        authRequired: true,\n        icon: 'img/icons/user_profile.svg',\n        breadcrumb: 'Профиль пользователя'\n      }\n    }]\n  }, {\n    path: '/404',\n    name: 'pageNotFound',\n    component: function component() {\n      return import(\"./views/PageNotFound\");\n    },\n    showInSideBar: false,\n    meta: {\n      authRequired: false\n    }\n  }, {\n    path: '/*',\n    redirect: '/404',\n    meta: {\n      authRequired: false\n    }\n  }]\n});\nrouter.beforeEach(function (to, from, next) {\n  //const isAuthorised = store.state.user.isAuthorised\n  var isAuthorised = sessionStorage.getItem('auth');\n\n  if (to.matched.some(function (record) {\n    return record.meta.authRequired;\n  })) {\n    if (!isAuthorised) {\n      next({\n        name: 'Login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    } else {\n      next();\n    }\n  } else {\n    next();\n  }\n});\nexport default router;",{"version":3,"sources":["/Volumes/MacOS/Files/GitLab/SCORM/scorm-admin/src/router.js"],"names":["Vue","Router","store","use","router","mode","base","process","env","BASE_URL","routes","path","name","component","meta","authRequired","redirect","sideMenuParent","children","props","showInSideBar","icon","breadcrumb","beforeEach","to","from","next","isAuthorised","sessionStorage","getItem","matched","some","record","query","fullPath"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Router from 'vue-router'\nimport store from './store'\n\nVue.use(Router)\n\nconst router = new Router({\n  mode:   'history',\n  base:   process.env.BASE_URL,\n  routes: [\n    {\n      path:      '/login',\n      name:      'Login',\n      component: () => import('./views/Login'),\n      meta:      {\n        authRequired: false\n      }\n    }, {\n      path:           '/',\n      name:           'Main',\n      component:      () => import('./views/Main'),\n      redirect:       {name: 'Dashboard'},\n      sideMenuParent: true,\n      meta:           {\n        authRequired: true\n      }, children:    [\n        {\n          path:          '/dashboard',\n          name:          'Dashboard',\n          component:     () => import('./components/dashboard/DashBoard'),\n          props:         {},\n          showInSideBar: true,\n          meta:          {\n            authRequired: true,\n            icon:         'img/icons/sidebar_dashboard.svg',\n            breadcrumb:   'Рабочий стол'\n          }\n        }, {\n          path:          '/pages',\n          name:          'Pages',\n          component:     () => import('./components/dashboard/DashBoard'),\n          props:         {},\n          showInSideBar: true,\n          meta:          {\n            authRequired: true,\n            icon:         'img/icons/sidebar_pages.svg',\n            breadcrumb:   'Контент'\n          }\n        }, {\n          path:          '/courses',\n          name:          'Courses',\n          component:     () => import('./components/dashboard/DashBoard'),\n          props:         {},\n          showInSideBar: true,\n          meta:          {\n            authRequired: true,\n            icon:         'img/icons/sidebar_courses.svg',\n            breadcrumb:   'Курсы'\n          }\n        }, {\n          path:          '/review',\n          name:          'Review',\n          component:     () => import('./components/dashboard/DashBoard'),\n          props:         {},\n          showInSideBar: true,\n          meta:          {\n            authRequired: true,\n            icon:         'img/icons/sidebar_review.svg',\n            breadcrumb:   'Отзывы'\n          }\n        }, {\n          path:          '/users',\n          name:          'Users',\n          component:     () => import('./components/dashboard/DashBoard'),\n          props:         {},\n          showInSideBar: true,\n          meta:          {\n            authRequired: true,\n            icon:         'img/icons/sidebar_users.svg',\n            breadcrumb:   'Пользователи'\n          }\n        }, {\n          path:          '/media',\n          name:          'Media',\n          component:     () => import('./components/dashboard/DashBoard'),\n          props:         {},\n          showInSideBar: true,\n          meta:          {\n            authRequired: true,\n            icon:         'img/icons/sidebar_media.svg',\n            breadcrumb:   'Медиа хранилище'\n          }\n        }, {\n          path:          '/profile',\n          name:          'Profile',\n          component:     () => import('./components/ui/settings/Account'),\n          props:         {},\n          showInSideBar: false,\n          meta:          {\n            authRequired: true,\n            icon:         'img/icons/user_profile.svg',\n            breadcrumb:   'Профиль пользователя'\n          }\n        }\n      ]\n    }, {\n      path:          '/404',\n      name:          'pageNotFound',\n      component:     () => import('./views/PageNotFound'),\n      showInSideBar: false,\n      meta:          {\n        authRequired: false\n      }\n    }, {\n      path:     '/*',\n      redirect: '/404',\n      meta:     {authRequired: false}\n    }\n\n  ]\n})\n\nrouter.beforeEach((to, from, next) => {\n\n  //const isAuthorised = store.state.user.isAuthorised\n  const isAuthorised = sessionStorage.getItem('auth')\n\n  if (to.matched.some(record => record.meta.authRequired)) {\n\n    if (!isAuthorised) {\n      next({\n        name:  'Login',\n        query: {redirect: to.fullPath}\n      })\n    } else {\n      next()\n    }\n  } else {\n    next()\n  }\n})\n\nexport default router\n"]}]}